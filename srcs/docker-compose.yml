
services:
#********************************************************************************#
#                               HASHICORP VAULT                                  #
#********************************************************************************#
# HashiCorp Vault service for managing secrets and sensitive data
  hashicorp_vault:
    image: hashicorp_vault
    build:
      context: ./vault
      dockerfile: Dockerfile
    container_name: hashicorp_vault
    volumes:
      - LocalVaultData:/vault/data
      - ./vault/config/vault.hcl:/vault/config/vault.hcl:ro
      - ./vault/certs/vault.crt:/vault/certs/vault.crt:ro
      - ./vault/certs/vault.key:/vault/certs/vault.key:ro
    cap_add:
      - IPC_LOCK
    # environment:
    #   - VAULT_ADDR=http://localhost:8200
    ports:
      - "8200:8200"
      - "8201:8201"
    networks:
      - global-net
      - security-net
    restart: unless-stopped
  #********************************************************************************#
  #                              BACKEND SERVICE                                   #
  #********************************************************************************#
  backend:
      image: backend
      build:
        context: ./backend
        dockerfile: Dockerfile
      container_name: backend
      volumes:
        - ./backend/app:/app
        - /app/node_modules
        - DataBase:/data
      networks:
        - global-net
        - security-net
      depends_on:
        - hashicorp_vault
      restart: unless-stopped
  #********************************************************************************#
  #                              FRONTEND SERVICE                                  #
  #********************************************************************************#
  frontend:
    image : frontend
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    depends_on:
      - backend
    volumes:
      - frontend-build:/app/build:rw
    networks:
      - global-net
    ports:
      - "3000:3000"
    restart: unless-stopped
  #********************************************************************************#
  #                              PROXY SERVICE                                     #
  #********************************************************************************#
  # Nginx reverse proxy with ModSecurity for security and SSL termination
  proxy:
    image: proxy
    build:
      context: ./proxy
      dockerfile: Dockerfile
    container_name: proxy
    depends_on:
      - frontend
    environment:
      - SSL_CERT=/etc/nginx/ssl/server.crt
      - SSL_CERT_KEY=/etc/nginx/ssl/server.key
    volumes:
      # Nginx HTML files
      - ./frontend/build:/usr/share/nginx/html
      # Nginx SSL certificates
      - ./proxy/nginx/certs/server.crt:/etc/nginx/ssl/server.crt:ro
      - ./proxy/nginx/certs/server.key:/etc/nginx/ssl/server.key:ro
      # Nginx configuration files
      - ./proxy/nginx/nginx.conf:/etc/nginx/templates/nginx.conf.template
      - ./proxy/nginx/conf.d/default.conf:/etc/nginx/templates/conf.d/default.conf.template
      - ./proxy/nginx/conf.d/modsecurity.conf:/etc/nginx/templates/conf.d/modsecurity.conf.template
      # ModSecurity configuration files
      - ./proxy/modsecurity/modsecurity.conf:/etc/nginx/modsecurity.d/modsecurity.conf
      - ./proxy/modsecurity/modsecurity-override.conf:/etc/nginx/templates/modsecurity.d/modsecurity-override.conf.template
      - ./proxy/modsecurity/setup.conf:/etc/nginx/templates/modsecurity.d/setup.conf.template
      - ./proxy/modsecurity/crs:/etc/nginx/modsecurity.d/crs
    ports:
      - "8443:443"
      - "8080:80"
    networks:
      - global-net
    restart: unless-stopped
#********************************************************************************#
#                              NETWORKS                                          #
#********************************************************************************#
networks:
  # Global network for all services
    global-net:
      driver: bridge
  #******************************************************************************#
  # Security network for sensitive services
    security-net:
      driver: bridge
#********************************************************************************#
#                              VOLUMES                                           #
#********************************************************************************# 
volumes:
  # Local volume for HashiCorp Vault data
  # This volume is used to persist Vault data across container restarts
  LocalVaultData:
    driver: local
    driver_opts:
      type: none
      device: ./vault/data
      o: bind
  #*******************************************************************************#
  # Local volume for frontend build artifacts
  # This volume is used to persist the build output of the frontend application
  frontend-build:
    driver: local
    driver_opts:
      type: none
      device: ./frontend/build
      o: bind
  #*******************************************************************************#
  # this volume is used to store the backend data
  DataBase:
    driver: local
    driver_opts:
      type: none
      device: ./backend/data
      o: bind